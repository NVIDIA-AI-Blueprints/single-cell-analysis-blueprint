name: ipynb Runner - Johnny Testing
run-name: ${{ github.actor }} is running ipynb tester

on:
  push:
    branches:
      - johnnynv-patch-dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy Environment'
        required: true
        default: 'staging'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-notebook:
    # runs-on: ubuntu-latest
    runs-on: arc-runner-set-oke-org-poc
    # runs-on: arc-runner-set-oke-org-nv-ai-bp
    env:
      DOCKER_IMG_NAME: "nvcr.io/nvidia/rapidsai/notebooks:25.06-cuda12.8-py3.12"
      DOCKER_COMPOSE_FILE: "${{ github.workspace }}/docker/brev/docker-compose-nb-2504.yaml"
      DOCKER_CACHE_PATH: "/tmp/docker-pull-cache"
      NOTEBOOK_PATH: "./notebooks/01_scRNA_analysis_preprocessing.ipynb"
      PYTHON_VERSION: "3.12"
    steps:  
      - name: Checkout BP repository
        uses: actions/checkout@v4
        
      - run: |
          echo "repo path is: ${{ github.workspace }}"
          ls -la "${{ github.workspace }}"
      
      - name: Debug Info
        run: |
          echo "=============Debug Info======================"
          pwd
          ls -al .
          echo "=============Debug Info======================"
     
      - uses: ./.github/actions/check-sysinfo

      # - uses: ./.github/actions/setup-env
      #   with:
      #     python-version: '3.12'
      #     check-disk: 'false'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/*.ipynb
            
      - name: Setup docker env
        env:
          NGC_API_Key: ${{ secrets.NGC_API_KEY }}
        run: |
          # Install wget
          sudo apt-get update
          sudo apt-get install wget
          # Install Docker and Docker Compose in a single step
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin docker-compose build-essential
          # Get System Info
          echo "===================== System Info ====================="
          more /etc/os-release
          nvidia-smi
          docker version
          docker compose version

      - name: Cache Docker image
        id: cache-docker-image
        uses: actions/cache@v3
        with:
          path: ${{ env.DOCKER_CACHE_PATH }}
          key: ${{ runner.os }}-docker-${{ hashFiles(format('{0}', env.DOCKER_COMPOSE_FILE)) }}
      
      - name: Ensure cache directory exists
        run: mkdir -p {{ env.DOCKER_CACHE_PATH }}

      - name: Debug cache key
        run: |
          echo "Primary Key: ${{ steps.cache-docker-image.outputs.cache-primary-key }}"
          echo "Cache Hit: ${{ steps.cache-docker-image.outputs.cache-hit }}"

      - name: Load docker image from cache or Pull it
        run: |
          start_time=$(date +%s)
          echo "Docker image will use: $DOCKER_IMG_NAME"

          DOCKER_IMG_CACHE_NAME=$(echo "$DOCKER_IMG_NAME" | sed 's/[\/:@.]/_/g')

          ### NOTE: it will save to the global ENV, BUT it won't efective in current step !!!
          ### so you still need to use ${***} in current step.
          echo "DOCKER_IMG_CACHE_NAME=${DOCKER_IMG_CACHE_NAME}" >> $GITHUB_ENV
          echo "Cache filename: ${DOCKER_IMG_CACHE_NAME}.tar"

          DOCKER_CACHE_PATH="${{ env.DOCKER_CACHE_PATH }}"
          if [ -f "${DOCKER_CACHE_PATH}/${DOCKER_IMG_CACHE_NAME}.tar" ]; then
            docker load -i ${DOCKER_CACHE_PATH}/${DOCKER_IMG_CACHE_NAME}.tar
          else
            if ! docker pull "$DOCKER_IMG_NAME"; then
              echo "Pull failed, retrying..." 
              sleep 30
              docker pull --quiet "$DOCKER_IMG_NAME" || {
                echo "Error: Docker pull failed after retry"
                exit 1
              }
            fi
            mkdir -p ${DOCKER_CACHE_PATH}
            docker save $DOCKER_IMG_NAME > ${DOCKER_CACHE_PATH}/${DOCKER_IMG_CACHE_NAME}.tar
          fi
          
          end_time=$(date +%s)
          echo "Execution time: $((end_time - start_time)) seconds"
        timeout-minutes: 20

      - name: Update cache if needed
        if: always()
        uses: actions/cache@v3
        with:
          path: /tmp
          key: ${{ steps.cache-docker-image.outputs.cache-primary-key }}

      - name: Verify cache
        run: |
          du -sh /tmp
          echo "Cache Key: ${{ steps.cache-docker-image.outputs.cache-primary-key }}"
          echo "Cache Hit: ${{ steps.cache-docker-image.outputs.cache-hit }}"

      - name: Start container
        run: |
          start_time=$(date +%s)
          docker images -a
          echo "Docker compose will use file: $DOCKER_COMPOSE_FILE"
          
          export HOST_PIP_CACHE_DIR="$HOME/.cache/pip"
          export NOTEBOOKS_HOST_PATH="${{ github.workspace }}"

          set -e
          export COMPOSE_HTTP_TIMEOUT=300
          docker compose --verbose -f "$DOCKER_COMPOSE_FILE" up -d --wait
          
          end_time=$(date +%s)
          echo "Execution time: $((end_time - start_time)) seconds"

      - name: Debug container logs
        if: ${{ failure() }}
        run: |
          docker ps -a
          # docker system df
          # docker stats
          # docker logs brev_backend_1
          # docker compose -f "$DOCKER_COMPOSE_FILE" logs --tail=50

      - name: Check running containers
        run: docker ps -a

      - name: Debug Info
        run: |
          echo "=============Debug Info======================"
          docker-compose -f "$DOCKER_COMPOSE_FILE" config --services
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend pwd
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend ls -al .
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend find . -maxdepth 2 | sed -e 's|[^/]*/|- |g' -e 's|^\./||'

          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend ls -al /home/
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend ls -al /home/rapids
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend cat /home/rapids/entrypoint.sh
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend pip list

          echo "=============Debug Info======================"

      - name: Run Jupyter Notebook
        env:
          NGC_API_Key: ${{ secrets.NGC_API_KEY }}
          NVIDIA_API_KEY: ${{ secrets.NGC_API_KEY }}
          NGC_CLI_API_KEY: ${{ secrets.NGC_API_KEY }}
        run: |
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend python --version
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend python3 --version

          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend python -m pip install --upgrade pip
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend pip install -r requirements.txt
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend pip install -r papermill ipywidgets torch

          # docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend python -m ipykernel install --user --name python3 --display-name "python3"
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend jupyter kernelspec list

          OUTPUT_NOTEBOOK="result.ipynb"
          echo "Executing notebook: $NOTEBOOK_PATH"
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend papermill "$NOTEBOOK_PATH" "$OUTPUT_NOTEBOOK" --log-output --log-level DEBUG
          echo "===============show content of nb====================="
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend cat "$OUTPUT_NOTEBOOK"
          echo "===============show content of nb====================="
          
      - name: Convert result to html format
        if: always()
        env:
          NGC_API_Key: ${{ secrets.NGC_API_KEY }}
        run: |
          OUTPUT_NOTEBOOK="result.ipynb"
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend jupyter nbconvert --to html "$OUTPUT_NOTEBOOK"
          echo "===============show content of nb html====================="
          docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T backend cat ./result.html
          echo "===============show content of nb html====================="

      # - name: Checkout Test repository
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'NVIDIA-AI-Blueprints/blueprint-github-test'
      #     token: ${{ secrets.BLUEPRINT_GITHUB_TEST }}
      #     path: blueprint-github-test-tmp
          
      # - name: Install Poetry/Dependencies and execute test
      #   run: |
      #     cd blueprint-github-test-tmp
      #     curl -sSL https://install.python-poetry.org | python3 -          
      #     $HOME/.local/bin/poetry install
      #     source $($HOME/.local/bin/poetry env info --path)/bin/activate
      #     rm -rf input/*
      #     cp ../result.html input/1_Deploy_LLM_Router.html
      #     ls -l input/
      #     pytest -m llm_router --disable-warnings
                             
      # - name: Upload the result notebook as artifact
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: result-notebook
      #     path: "result.html"
      #     retention-days: 30

      - name: Stop containers
        if: ${{ always() }}
        run: docker-compose -f "$DOCKER_COMPOSE_FILE" down
          